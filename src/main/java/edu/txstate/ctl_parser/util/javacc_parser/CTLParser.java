/* CTLParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CTLParser.java */
    package edu.txstate.ctl_parser.util.javacc_parser;

    import java.io.InputStream;
    import java.io.ByteArrayInputStream;
    import java.io.InputStreamReader;
    import java.io.BufferedReader;

    public class CTLParser/*@bgen(jjtree)*/implements CTLParserTreeConstants, CTLParserConstants {/*@bgen(jjtree)*/
        //protected static JJTCTLParserState jjtree = new JJTCTLParserState();
        protected static JJTeg1State jjtree = new JJTeg1State();

        public static void main(String...args) throws ParseException {
            InputStreamReader converter = new InputStreamReader(System.in);
            BufferedReader in = new BufferedReader(converter);
            InputStream stream = new ByteArrayInputStream(new byte[0]);
            CTLParser parser = new CTLParser(stream);

            System.out.println("Reading from standard input...");
            System.out.println("A well formed formula (WFF) phi (phi) for Computational Tree Logic (CTL) may be in the form: ");
            System.out.println("phi ::= false | true | p | (~phi) | (phi & phi) | (phi | phi) | (phi -> phi) | AX phi | EX phi | "
                                + "\n AF phi | EF phi | AG phi | EG phi | A[phi U phi] | E[phi U phi]");
            System.out.print("Enter a WFF for CTL: ");

            try {
                stream = new ByteArrayInputStream(in.readLine().getBytes());
                parser.ReInit(stream);
                ASTCTLFormula f = parser.Formula();
                f.dump("");
            } catch (Exception e) {
                System.err.println("An exception occurred!");
                System.err.println(e.getMessage());
                e.printStackTrace();
            } catch (Error e) {
                System.err.println("An error occurred!");
                System.err.println(e.getMessage());
            }
        }

  static final public ASTCTLFormula Formula() throws ParseException {
    trace_call("Formula");
    try {
/*@bgen(jjtree) Formula */
  ASTCTLFormula jjtn000 = new ASTCTLFormula(JJTFORMULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
      try {
        Phi();
        jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Formula");
    }
}

  static final public void Phi() throws ParseException {
    trace_call("Phi");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ATOM:{
        Atom();
        break;
        }
      case 16:{
        jj_consume_token(16);
        expr();
        jj_consume_token(17);
        break;
        }
      case ALL:
      case EXISTS:{
        Connective();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Phi");
    }
}

  static final public void expr() throws ParseException {
    trace_call("expr");
    try {
/*@bgen(jjtree) Expr */
 ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Node n; int result=-1;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          result = jj_consume_token(NOT).kind;
          Phi();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setType(result);
          break;
          }
        case ALL:
        case EXISTS:
        case ATOM:
        case 16:{
          Phi();
          result = exprPrime2();
          Phi();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setType(result);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("expr");
    }
}

  static final public int exprPrime2() throws ParseException {
    trace_call("exprPrime2");
    try {
Token t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        t = jj_consume_token(AND);
{if ("" != null) return t.kind;}
        break;
        }
      case OR:{
        t = jj_consume_token(OR);
{if ("" != null) return t.kind;}
        break;
        }
      case THEN:{
        t = jj_consume_token(THEN);
{if ("" != null) return t.kind;}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("exprPrime2");
    }
}

  static final public void exprPrime() throws ParseException {
    trace_call("exprPrime");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        Phi();
        break;
        }
      case OR:{
        jj_consume_token(OR);
        Phi();
        break;
        }
      case THEN:{
        jj_consume_token(THEN);
        Phi();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("exprPrime");
    }
}

  static final public void Connective() throws ParseException {
    trace_call("Connective");
    try {
/*@bgen(jjtree) Connective */
 ASTConnective jjtn000 = new ASTConnective(JJTCONNECTIVE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);int path, temporal;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALL:{
          path = jj_consume_token(ALL).kind;
          temporal = connPart2();
          break;
          }
        case EXISTS:{
          path = jj_consume_token(EXISTS).kind;
          temporal = connPart2();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setType(path, temporal);
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Connective");
    }
}

  static final public int connPart2() throws ParseException {
    trace_call("connPart2");
    try {
int kind;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEXT:{
        kind = jj_consume_token(NEXT).kind;
        Phi();
        break;
        }
      case FUTURE:{
        kind = jj_consume_token(FUTURE).kind;
        Phi();
        break;
        }
      case GLOBALLY:{
        kind = jj_consume_token(GLOBALLY).kind;
        Phi();
        break;
        }
      case 18:{
        jj_consume_token(18);
        Phi();
        kind = jj_consume_token(UNTIL).kind;
        Phi();
        jj_consume_token(19);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return kind;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("connPart2");
    }
}

  static final public void Atom() throws ParseException {
    trace_call("Atom");
    try {
/*@bgen(jjtree) Atom */
 ASTAtom jjtn000 = new ASTAtom(JJTATOM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
      try {
        t = jj_consume_token(ATOM);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setName(t.image);
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
      }
    } finally {
      trace_return("Atom");
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CTLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x18600,0x18620,0x1c0,0x1c0,0x600,0x43800,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public CTLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CTLParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CTLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CTLParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CTLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CTLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CTLParser(CTLParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CTLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[20];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 6; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 20; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

          // end main
    } // end class

